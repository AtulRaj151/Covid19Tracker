{"version":3,"sources":["Component/Cards/Cards.module.css","Component/Cards/Cards.jsx","api/index.js","Component/Chart/Chart.jsx","Component/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","Component/Chart/Chart.module.css","Component/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varient","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","modifiedData2","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","mydata","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d992086c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2Lh40\",\"card\":\"Cards_card__2f1BD\",\"infected\":\"Cards_infected__2KEQf\",\"recovered\":\"Cards_recovered__Ia-Au\",\"deaths\":\"Cards_deaths__mj4o4\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\r\n     if(!confirmed){\r\n           return 'Loading..';\r\n     }\r\n\r\n      return(\r\n         <div className={styles.container}>\r\n               <Grid container spacing={3} justify=\"center\">\r\n                   <Grid item component={Card} xs={12} md={3}  className={cx(styles.card,styles.infected)}>\r\n                         <CardContent>\r\n                                <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                                <Typography varient=\"h5\">\r\n                                       <CountUp  start={0} end={confirmed.value} duration={2.5}  separator=\",\"  />\r\n                                </Typography>\r\n      <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                                <Typography varient=\"body2\">Number of active from Covid19</Typography>\r\n                         </CardContent>\r\n\r\n                   </Grid>\r\n\r\n                   <Grid item component={Card} xs={12} md={3}  className={cx(styles.card,styles.recovered)}>\r\n                         <CardContent>\r\n                                <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                                <Typography varient=\"h5\">\r\n                                <CountUp  start={0} end={recovered.value} duration={2.5}  separator=\",\"  />\r\n                                </Typography>\r\n                                <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                                <Typography varient=\"body2\">Number of recoveries from Covid19</Typography>\r\n                         </CardContent>\r\n\r\n                   </Grid>\r\n\r\n                   <Grid item component={Card} xs={12} md={3}  className={cx(styles.card,styles.deaths)}>\r\n                         <CardContent>\r\n                                <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                                <Typography varient=\"h5\">\r\n                                <CountUp  start={0} end={deaths.value} duration={2.5}  separator=\",\"  />\r\n                                </Typography>\r\n                                <Typography color=\"textSecondary\">\r\n                                {new Date(lastUpdate).toDateString()}\r\n                                \r\n                                </Typography>\r\n                                <Typography varient=\"body2\">Number of deaths from Covid19</Typography>\r\n                         </CardContent>\r\n\r\n                   </Grid>\r\n               </Grid>\r\n\r\n         </div>\r\n      )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData   =  async (country) => {\r\n\r\n    let changeableUrl = url;\r\n\r\n      if(country) {\r\n          changeableUrl = `${url}/countries/${country}`;\r\n      }\r\n\r\n    try {\r\n        const {data :{ confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n      \r\n         const modifiedData = {   confirmed, recovered, deaths, lastUpdate,}\r\n\r\n         return modifiedData\r\n    } catch (error) {\r\n\r\n        \r\n        console.log(error);\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n\r\n     try {\r\n         const {data} = await axios.get(`${url}/daily`);\r\n          const modifiedData2 = data.map((dailyData) => ({\r\n              confirmed: dailyData.confirmed.total,\r\n              deaths:dailyData.deaths.total,\r\n              date:dailyData.reportDate,\r\n\r\n          }));\r\n\r\n\r\n          return modifiedData2;\r\n     \r\n     } catch (error) {\r\n\r\n        console.log(error)\r\n         \r\n     }\r\n}\r\n\r\nexport const fetchCountries  = async () => {\r\n       try {\r\n\r\n          const {data:{ countries}}= await axios.get(`${url}/countries`);\r\n          \r\n          return countries.map((country) => country.name);\r\n           \r\n       } catch (error) {\r\n           console.log(error)\r\n       }\r\n}\r\n\r\n","import React, { useState, useEffect} from 'react';\r\nimport styles from './Chart.module.css';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar } from 'react-chartjs-2';\r\n\r\n\r\n\r\n\r\nconst Chart =  ({ data: { confirmed, recovered, deaths }, country}) => {\r\n   const [dailyData, setDailyData ] = useState([]);\r\n  \r\n   useEffect( () => {\r\n         const fetchAPI = async () => {\r\n           const mydata  = await fetchDailyData();\r\n           \r\n          await setDailyData(mydata)\r\n         }\r\n\r\n      \r\n        \r\n         fetchAPI();\r\n        \r\n   },[]);\r\n   // console.log(\"daily data\",dailyData);\r\n\r\n    const lineChart  = (\r\n          dailyData.length? (<Line\r\n              \r\n               data = {{\r\n                  labels:dailyData.map(({date}) => date),\r\n                  datasets:[{\r\n                     data: dailyData.map(({confirmed}) => confirmed),\r\n                     label: 'Infected',\r\n                     borderColor: '#3333ff',\r\n                     fill:true,\r\n                  },{\r\n                     data: dailyData.map(({deaths}) => deaths),\r\n                     label: 'Deaths',\r\n                     borderColor: 'rgba(255,0,0,0.5)',\r\n                     fill:true,\r\n                  }],\r\n               }}\r\n           />):null\r\n    );\r\n\r\n    const barChart = (\r\n          confirmed\r\n          ? (\r\n              <Bar\r\n              data={{\r\n               labels: ['Infected', 'Recovered', 'Deaths'],\r\n               datasets: [\r\n                  {\r\n                    label: 'People',\r\n                    backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                    data: [confirmed.value, recovered.value, deaths.value],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n               legend: { display: false },\r\n               title: { display: true, text: `Current state in ${country}` },\r\n              }}\r\n              />\r\n          ): null\r\n    );\r\n      return(\r\n         <div className={styles.container}>\r\n          {country ? barChart : lineChart}\r\n         </div>\r\n      )\r\n}\r\n\r\nexport default Chart;","import React, {useState,useEffect} from 'react';\r\nimport { NativeSelect , FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries }  from '../../api';\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n      const [fetchedCountries, setFetchedCountries]  = useState([]);\r\n      useEffect(() => {\r\n              const fetchAPI = async () => {\r\n                            setFetchedCountries(await fetchCountries());\r\n              }\r\n              fetchAPI();\r\n            \r\n      },[]);\r\n      console.log(fetchedCountries)\r\n      return(\r\n         <FormControl className={styles.formControl}>\r\n                <NativeSelect defaultValue=\"\"  onChange={(e) => handleCountryChange(e.target.value)}>\r\n                       <option value=\"\">Global</option>\r\n                       {fetchedCountries.map((country, i)=> <option key={i} value={country}>{country}</option>)}\r\n                </NativeSelect>\r\n         </FormControl>\r\n      )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport { Cards,Chart,CountryPicker} from './Component';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api/index';\r\n\r\nimport  coronaImage from './images/image.png'\r\nclass App extends React.Component {\r\n\r\n    //constructor automatically callled\r\n\r\n      state = {\r\n            data: {},\r\n            country:'',\r\n\r\n      }\r\n\r\n   async  componentDidMount(){\r\n\r\n\r\n         const fetchedData = await fetchData();\r\n         //set data to the state\r\n          this.setState({data:fetchedData});\r\n   \r\n    }\r\n    handleCountryChange = async (country) => {\r\n        // console.log(country)\r\n        const fetchedData = await fetchData(country);\r\n        console.log(fetchedData);\r\n    \r\n           //set state\r\n\r\n           this.setState({data:fetchedData,country:country});\r\n    }\r\n     \r\n    render() {\r\n        const {data, country} = this.state;\r\n\r\n          return(\r\n\r\n               <div className={styles.container}>\r\n                     <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\r\n                     <div>ReactApp:: Atul Raj</div>\r\n                   {/* pass data to the card as props */}\r\n                   <Cards  data={data}/>\r\n                   <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                   <Chart data={data} country={country}/>\r\n               </div>\r\n          )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM  from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1U6UP\",\"image\":\"App_image__2IQNf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__EwWmo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__Jb1Dk\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}